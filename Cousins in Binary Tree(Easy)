Question:-https://leetcode.com/problems/cousins-in-binary-tree/

In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:

(https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png)


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:

(https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png)

Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:


(https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png)

Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

Solution:-
class Solution {
public:
    int xdepth, ydepth, xparent, yparent;

void depth(TreeNode* root, int x, int y, int dep, int par_val){
    if(root==NULL) return;
    if(root->val==x){
        xdepth=dep;
        xparent=par_val;
        return;
    }
    if(root->val==y){
        ydepth=dep;
        yparent=par_val;
        return;
    }
    depth(root->left, x, y, dep+1, root->val);
    depth(root->right, x, y, dep+1, root->val);
}
bool isCousins(TreeNode* root, int x, int y) {
    if(root->val==x || root->val==y) return false;
    depth(root, x, y, 0, 0);
    
    if(xdepth==ydepth && xparent!=yparent) return true;
    return false;
}
};
