Link:-https://leetcode.com/problems/different-ways-to-add-parentheses/
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators.
The valid operators are +, - and *.

Example 1:

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2
Example 2:

Input: "2*3-4*5"
Output: [-34, -14, -10, -10, 10]
Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

Solution:-
class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int>ans;
        int i,j,k,l;
        for(i=input.size()-1;i>=0;i--)
        {
            if(input[i]=='+' || input[i]=='-' ||  input[i]=='*')
            {
                string left="";
                string right="";
                for(j=0;j<i;j++ )
                {
                    left=left+input[j];
                }
                for(j=i+1;j<input.size();j++)
                    right=right+input[j];
                vector<int>lef_res;
                    lef_res=diffWaysToCompute(left);
                vector<int>rig_res;
                    rig_res=diffWaysToCompute(right);
                for(auto it:lef_res)
                    for(auto iy:rig_res)
                    {
                        if(input[i]=='+')
                        {
                            ans.push_back(it+iy);
                        }
                        else if(input[i]=='-')
                        {
                            ans.push_back(it-iy);
                        }
                         else if(input[i]=='*')
                        {
                            ans.push_back(it*iy);
                        }
                    }
                
            }
        }
        
        if(ans.size()==0)
        {
            int t,o,v;
            o=0;
            for(t=0;t<input.size();t++)
            {
                o=o*10+input[t]-'0';
            }
            ans.push_back(o);
        }
            return ans;
    }
};
