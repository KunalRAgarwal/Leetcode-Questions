Question Link:-https://leetcode.com/problems/merge-k-sorted-lists/
Note:-There are 2 solution posted for this question 
Question:-
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6


Solution 1:-
Brute Force:-This Technique is good for Time complexity but not for space complexity
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        vector<int>v;
        if(lists.size()==0)
            return NULL;
        for(auto it:lists)
        {
            ListNode* y=it; 
            while(y!=NULL)
            {
                v.push_back(y->val);
                y=y->next;
            }
        }
        sort(v.begin(),v.end());
        ListNode* t=new ListNode(0);
        ListNode* h=t;
        for(auto it:v)
        {
            ListNode* n=new ListNode(it);
            t->next=n;
            t=t->next;
        }
        return h->next;
    }
};

Solution 2:-
Merge Lists one by one 
The Time complexity is comparatively bad but the space complexity is O(1)
class Solution {
public:
    ListNode* merg(ListNode* h1,ListNode* h2)
    {
        ListNode* t=new ListNode(0);
        ListNode* h=t;
        while(h1!=NULL && h2!=NULL)
        {
            if(h1->val<h2->val)
            {
                ListNode* y=new ListNode(h1->val);
                t->next=y;
                t=t->next;
                h1=h1->next;
            }
            else
            {
                 ListNode* y=new ListNode(h2->val);
                t->next=y;
                t=t->next;
                h2=h2->next;
            }
        }
        while(h1!=NULL)
        {
        ListNode* y=new ListNode(h1->val);
                t->next=y;
                t=t->next;
                h1=h1->next;    
        }
        while(h2!=NULL)
        {
          ListNode* y=new ListNode(h2->val);
                t->next=y;
                t=t->next;
                h2=h2->next;  
        }
        return h->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        vector<int>v;
        if(lists.size()==0)
            return NULL;
       ListNode* ans=NULL;
        for(auto it:lists)
        {
            ans=merg(ans,it);
        }
        return ans;
    }
};
The above solution can also be solved using divide and conquer approach also.
