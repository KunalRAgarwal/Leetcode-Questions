https://leetcode.com/problems/edit-distance/
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

Answer:-
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        int i,j,k,l,o,p;
        int arr[n+1][m+1];
        for(i=0;i<=n;i++)
        {
            for(j=0;j<=m;j++)
                arr[i][j]=0;
        }
        for(i=0;i<=n;i++)
            arr[i][0]=i;
        for(i=0;i<=m;i++)
            arr[0][i]=i;
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=m;j++)
            {
                if(word1[i-1]==word2[j-1])
                    o=0;
                else
                    o=1;
                p=min(arr[i-1][j]+1,arr[i][j-1]+1);
                arr[i][j]=min(p,arr[i-1][j-1]+o);
            }
        }
        return arr[n][m];
    }
};

Best Explaination=https://en.wikipedia.org/wiki/Levenshtein_distance
