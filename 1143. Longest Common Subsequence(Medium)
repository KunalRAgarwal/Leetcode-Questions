Question:-https://leetcode.com/problems/longest-common-subsequence/

Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without
changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). 
A common subsequence of two strings is a subsequence that is common to both strings.

 

If there is no common subsequence, return 0.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length <= 1000
1 <= text2.length <= 1000
The input strings consist of lowercase English characters only.

Answer 
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size();
        int m=text2.size();
        int i,j,k,l,o;
        int arr[n+1][m+1];
        for(i=0;i<=n;i++)
        for(j=0;j<=m;j++)
            arr[i][j]=0;
        
        for(i=1;i<=n;i++)
        {
            
            for(j=1;j<=m;j++)
            {
                if(text1[i-1]==text2[j-1])
                {
                        arr[i][j]=1+arr[i-1][j-1];
                }
                else
                {
                    arr[i][j]=max(arr[i-1][j],arr[i][j-1]);
                }
            }
        
        }
        return arr[n][m];
    }
};

Best Explaination:-https://en.wikipedia.org/wiki/Longest_common_subsequence_problem
