Link:-https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/
Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

 

Example 1:


Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [0]
Output: [0]
Example 4:

Input: head = [1,3]
Output: [3,1]


Solution:-
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
     vector<int>v;
    ListNode* h=head;
        while(h!=NULL)
        {
            v.push_back(h->val);
            h=h->next;
        }
        TreeNode* ans=sortedArrayToBST(v);
        return ans;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.size()==0)
            return NULL;
        int n=nums.size()/2;
        vector<int>l;
        vector<int>r;
        int i,j,k;
        for(i=0;i<n;i++)
            l.push_back(nums[i]);
        for(i=n+1;i<nums.size();i++)
            r.push_back(nums[i]);
        TreeNode* root=new TreeNode(nums[n]);
        root->left=sortedArrayToBST(l);
        root->right=sortedArrayToBST(r);
        return root;
    }
};
