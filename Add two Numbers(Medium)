Question Link->https://leetcode.com/problems/add-two-numbers/
Question
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution:-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
    {
    ListNode* p=l1;
    ListNode* q=l2;
        ListNode* head=new ListNode(NULL);
        int carry=0;
        ListNode* curr=head;
        while(p!=NULL || q!=NULL)
        {
            int a=(p!=NULL)?p->val:0;                 //This is for taking values from linked list
              int b=(q!=NULL)?q->val:0;     
           int sum=carry+a+b;
            carry=sum/10;
            ListNode* t=new ListNode(sum%10);         
            curr->next=t;
            curr=curr->next;
            if(p!=NULL)
                p=p->next;
            if(q!=NULL)
                q=q->next;
            
        }
        if (carry!=0)
        {
             ListNode* t=new ListNode(carry);     //Will happen for example in case like 999+999=1998 the extra hardwork is done for that one
            curr->next=t; 
        }
        return head->next;
      
    }
};
